name: Continuous Integration

on:
  push:
    branches: ["branch"]
env:
   APPLICATION_NAME: flexbox  
jobs:
   build-image:
         name: ðŸ›  Building and Pushing to Docker Hub
         runs-on: ubuntu-latest
         outputs:
           git-current-commit: ${{ steps.load-env.outputs.GIT_CURRENT_COMMIT}}
         steps:
           - name: Checkout repository
             uses: actions/checkout@v4
     
           - name: Export Git Commit for Image Tagging
             id: load-env
             run: |
               GIT_CURRENT_COMMIT=$(git rev-parse --short HEAD)
               echo "GIT_CURRENT_COMMIT=$GIT_CURRENT_COMMIT" > "$GITHUB_OUTPUT"

           - name: login to docker hub
             uses: docker/login-action@v2
             with:
                username: ${{secrets.DOCKER_HUB_USERNAME}}
                password: ${{secrets.DOCKER_HUB_TOKEN}}
                
                
           - name: Set up Docker Buildx
             uses: docker/setup-buildx-action@v2
                
           - name: build the docker image
             uses: docker/build-push-action@v3
             with:
                 context: .
                 file: ./Dockerfile
                 push: true
                 cache-from: type=gha
                 cache-to: type=gha,mode=max
                 tags: ${{secrets.DOCKER_HUB_USERNAME}}/${{secrets.REPOSITORY}}:test 
  
   deploy:
       name: Deploying to GCP ðŸš€
       needs: [build-image]
       runs-on: ubuntu-latest
       steps:
             - uses: actions/checkout@v4
             - name: "Authentication for production"
               uses: "google-github-actions/auth@v1"
               with:
                 credentials_json: "${{ secrets.GCP_SERVICE_ACCT_TOKEN }}" 
                
             - name: 'Set up Cloud SDK'
               uses: 'google-github-actions/setup-gcloud@v2'
               with:
                 install_components: "beta"

             - name: 'Use gcloud CLI'
               run: 'gcloud info'

            #  - name: Credentials
            #    shell: 'bash'
            #    run: |
            #      cat <<EOF >> initial_script.sh 
            #       export DOCKER_HUB_USERNAME='${{ secrets.DOCKER_HUB_USERNAME }}' 
            #       export DOCKER_HUB_TOKEN='${{ secrets.DOCKER_HUB_TOKEN }}' 
            #       . bash_test.sh 
            #      EOF

             - name: Pushing Deploy scripts to GCP Storage bucket for Init scripts.
               shell: bash
               run: |
                 gcloud storage cp bash_test.sh gs://deploy-file/frontend-script
                 gcloud storage cp refontetech_test.sh gs://deploy-file/frontend-script
                 gcloud storage cp refonteai_test.sh gs://deploy-file/frontend-script
                

             - name: Creating new instance template for MIG.
               shell: bash
               run: |
                
                 gcloud compute instance-templates create template-be-${{needs.build-image.outputs.git-current-commit}} \
                    --machine-type=e2-micro \
                    --create-disk=auto-delete=yes,boot=yes,device-name=instance-1,image=projects/debian-cloud/global/images/debian-12-bookworm-v20240709,mode=rw,size=10,type=pd-balanced \
                    --instance-template-region=us-central1 \
                    --region=us-central1 \
                    --network-interface=network=default,no-address \
                    --tags=http,https \
                    --provisioning-model=SPOT \
                    --reservation-affinity=any \
                    --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/trace.append \
                    --service-account=143246188165-compute@developer.gserviceaccount.com \
                    --project=primeval-mark-378114

             - name: Create a MIG or Update an existing MIG
               shell: bash
               run: |
                # Check if the instance group exists
                if gcloud compute instance-groups managed describe instance-group-tp --project=primeval-mark-378114 --zone=us-central1-c ; then
                   gcloud beta compute instance-groups managed rolling-action start-update instance-group-tp --project=primeval-mark-378114 --type='proactive' --max-surge=1 --max-unavailable=0 --min-ready=1600 --minimal-action='replace' --most-disruptive-allowed-action='replace'  --replacement-method='substitute' --version=template=projects/primeval-mark-378114/regions/us-central1/instanceTemplates/template-be-${{needs.build-image.outputs.git-current-commit}} --zone=us-central1-c
                else 
                   gcloud beta compute instance-groups managed create instance-group-tp --template=projects/primeval-mark-378114/regions/us-central1/instanceTemplates/template-be-${{needs.build-image.outputs.git-current-commit}} --size=1 --zone=us-central1-c
                   gcloud beta compute instance-groups set-named-ports instance-group-tp  --named-ports frontend:5000 --zone us-central1-c
                fi
                sleep 10
                NB_VM=$(gcloud compute instances list --project=primeval-mark-378114 --format="value(name)" | wc -l)
                echo $NB_VM
                if [ $NB_VM > 1 ] ;then  
                              New_VM=$(gcloud compute instances list --project=primeval-mark-378114 --format="json" | jq -r 'sort_by(.creationTimestamp) | last | .name')
                              echo $NB_VM  
                              echo $New_VM
                else echo "new server is not created"
                fi
                # # This gcloud ssh command is to create docker containers for refontelearning frontend AI project  
                # gcloud compute ssh "$New_VM" --zone "us-central1-c" --tunnel-through-iap --project "primeval-mark-378114" --command="gcloud storage cp gs://deploy-file/frontend-script/bash_test.sh . && export DOCKER_HUB_USERNAME='${{secrets.DOCKER_HUB_USERNAME}}' && export DOCKER_HUB_TOKEN='${{secrets.DOCKER_HUB_TOKEN}}' && chmod a+x bash_test.sh && ./bash_test.sh "
               
                # # This gcloud ssh command is to create docker containers for refontetech project
                # gcloud compute ssh "$New_VM" --zone "us-central1-c" --tunnel-through-iap --project "primeval-mark-378114" --command="gcloud storage cp gs://deploy-file/frontend-script/refontetech_test.sh . && export DOCKER_HUB_USERNAME='${{secrets.DOCKER_HUB_USERNAME}}' && export DOCKER_HUB_TOKEN='${{secrets.DOCKER_HUB_TOKEN}}' && chmod a+x refontetech_test.sh && ./refontetech_test.sh "
                
                # # This gcloud ssh command is to create docker containers for refonte AI project
                # cloudg compute ssh "$New_VM" --zone "us-central1-c" --tunnel-through-iap --project "primeval-mark-378114" --command="gcloud storage cp gs://deploy-file/frontend-script/refonteai_test.sh . && export DOCKER_HUB_USERNAME='${{secrets.DOCKER_HUB_USERNAME}}' && export DOCKER_HUB_TOKEN='${{secrets.DOCKER_HUB_TOKEN}}' && chmod a+x refonteai_test.sh && ./refonteai_test.sh "

                # Ou Executer l'unique command "gcloud ssh"  ci-desous qui permet d'executer simultanement les 3 commandes "gcloud ssh" ci-dessus
                gcloud compute ssh "$New_VM" --zone "us-central1-c" --tunnel-through-iap --project "primeval-mark-378114" --command="gcloud storage cp gs://deploy-file/frontend-script/bash_test.sh . && gcloud storage cp gs://deploy-file/frontend-script/refontetech_test.sh . && gcloud storage cp gs://deploy-file/frontend-script/refonteai_test.sh . && export DOCKER_HUB_USERNAME='${{secrets.DOCKER_HUB_USERNAME}}' && export DOCKER_HUB_TOKEN='${{secrets.DOCKER_HUB_TOKEN}}' && chmod a+x *.sh && ./bash_test.sh && ./refontetech_test.sh && ./refonteai_test.sh"